# This file configures the analyzer, which statically analyzes Dart code to
# check for errors, warnings, and lints.
#
# The issues identified by the analyzer are surfaced in the UI of Dart-enabled
# IDEs (https://dart.dev/tools#ides-and-editors). The analyzer can also be
# invoked from the command line by running `flutter analyze`.

# The following line activates a set of recommended lints for Flutter apps,
# packages, and plugins designed to encourage good coding practices.
include: package:flutter_lints/flutter.yaml

linter:
  # The lint rules applied to this project can be customized in the
  # section below to disable rules from the `package:flutter_lints/flutter.yaml`
  # included above or to enable additional rules. A list of all available lints
  # and their documentation is published at https://dart.dev/lints.
  #
  # Instead of disabling a lint rule for the entire project in the
  # section below, it can also be suppressed for a single line of code
  # or a specific dart file by using the `// ignore: name_of_lint` and
  # `// ignore_for_file: name_of_lint` syntax on the line or in the file
  # producing the lint.
  rules:
    # avoid_print: false  # Uncomment to disable the `avoid_print` rule
    # prefer_single_quotes: true  # Uncomment to enable the `prefer_single_quotes` rule
    - avoid_empty_else # 불필요한 else 문을 피하도록 권장. if 문의 모든 분기가 반환 값을 가지면 else 는 필요없습니다.
    - avoid_relative_lib_imports # 라이브러리 파일을 상대 경로가 아닌 패키지 경로를 사용하여 임포트하도록 권장. 코드의 가독성과 유지 보수성을 높임.
    - await_only_futures # await 키워드는 오직 Future 객체에만 사용해야 합니다. 다른 유형에서의 오작동 방지.
    - camel_case_types # 클래스와 열거형 타입의 이름은 카멜 케이스를 사용하도록 권장.
    - constant_identifier_names # 상수 이름은 대문자와 밑줄을 사용하는 것이 권장.
    - curly_braces_in_flow_control_structures # 제어 구조(if, for, while 등)에서 중괄호 사용을 권장. 코드의 명확성을 높임.
    - empty_constructor_bodies # 생성자 본문이 비어있으면 중괄호를 생략하도록 권장.
    - file_names # 파일 이름은 소스 코드 내의 주요 클래스와 일치해야 하며, 스네이크 케이스를 사용해야 합니다.
    - no_duplicate_case_values # switch 문에서 중복된 케이스 값을 피하도록 권장. 중복된 값은 버그의 원인이 될 수 있음.
    - non_constant_identifier_names # 변수, 파라미터, 세터의 이름은 로우 카멜 케이스를 사용하도록 권장.
    - prefer_const_constructors # 가능할 때마다 const 생성자를 사용하도록 권장. 성능 최적화에 도움.
    - prefer_final_fields # 변하지 않는 필드는 final 로 선언하도록 권장. 코드의 안정성과 명확성을 높임.
    - prefer_if_null_operators # null 확인과 값을 할당하는 표현식에는 ?? 연산자를 사용하도록 권장.
    - prefer_is_empty # 컬렉션이 비어있는지 확일할 때 length 대신 isEmpty 를 사용하도록 권장.
    - prefer_is_not_empty # 컬렌션이 비어있지 않은지 확인할 때 length > 0 대신 isNotEmpty 를 사용하도록 권장.
    - sort_child_properties_last # 위젯의 child 및 children 속성은 다른 속성들 뒤에 위치하도록 권장. 일관성 있는 코드 구조를 제공.
    - type_init_formals # 메서드나 생성자의 파라미터에서 타입과 이름이 동일한 경우, 타입 명시를 생략하도록 권장.
    - unnecessary_brace_in_string_interps # 문자열 보간에서 필요하지 않은 중괄호는 생략하도록 권장.
    - unnecessary_const # 필요하지 않은 const 키워드는 생략하도록 권장. Dart 2.0 이후 많은 경우에서 const 는 자동으로 추론됨.
    - unnecessary_new # 필요하지 않은 new 키워드는 생략하도록 권장. Dart 2.o 이후 new 는 선택적으로 바뀜.
    - unnecessary_this # 필요하지 않은 this 키워드는 생략하도록 권장. 현재 인스턴스에 속한 속성이나 메서드에 접근할 때 this 생략 가능.(다른 지역 변수나 파라미터와 이름이 충돌하지 않는 경우)

analyzer:
  exclude:
    - ios/
    - build/
    - android/
    - linux/
    - macos/
    - web/
    - test/
# Additional information about this file can be found at
# https://dart.dev/guides/language/analysis-options
